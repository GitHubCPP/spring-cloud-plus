user nginx nginx;

# 运行工作进程个数一般设置CPU的核心或者核心数x2
worker_processes  1;
# worker_cpu_affinity 0001 0010 0100 1000
# 最大打开文件数
worker_rlimit_nofile 2000;

pid /var/run/nginx.pid;
# [ debug | info | notice | warn | error | crit ]
error_log  /var/log/nginx/error.log  error;

events {
    # 客户端最大连接数
    worker_connections 2000;
    # use [ kqueue | epoll | /dev/poll | select | poll ];
    # 客户端线程轮询方法、内核2.6版本以上的建议使用epoll
    use epoll;
    accept_mutex on;
    multi_accept on;
}

http {

    include       mime.types;
    include   /etc/nginx/conf.d/*.conf;
    default_type  application/octet-stream;
    # 关闭版本号
    server_tokens     off;

    log_format main      '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         '"$gzip_ratio"';

    log_format download  '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         '"$http_range" "$sent_http_content_range"';

    # 接保持会话超时时间180秒
    keepalive_timeout  65 180;
    # 指定请求头的超时时间
    client_header_timeout  3m;
    # 指定请求体超时时间
    client_body_timeout    3m;
    send_timeout           3m;

    client_header_buffer_size    1k;
    large_client_header_buffers  4 4k;

    # 传输压缩
    gzip  on;                      #开启gzip压缩输出
    gzip_buffers 4 64k;           #表示申请4个单位为64kB的内存作为压缩结果流缓存
    gzip_http_version 1.1;      #用于设置http协议版本，默认是1.1
    gzip_comp_level 2;         #指定gzip压缩比，压缩比最小，处理速度最快
    gzip_min_length 1k;       #设置允许压缩的页面最小字节数
    gzip_vary on;            #让前端的缓存服务器缓存经过gzip压缩的页面
    gzip_types       text/plain text/javascript application/x-javascript text/css text/xml application/xml application/xml+rss text/jpg text/png;

    output_buffers   1 32k;
    postpone_output  1460;

    # 开启高效文件传输模式。
    sendfile         on;
    # 防止网路阻塞，积极的减少网络报文段的数量
    tcp_nopush       on;
    tcp_nodelay      on;

    open_file_cache max=102400 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 1;

    #lingering_time     30;
    #lingering_timeout  10;
    reset_timedout_connection  on;

    # 配置跨域
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods 'GET,POST,PUT,PATCH,OPTIONS';
    add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';


    upstream cloud_plus  {
         server 111.231.111.150:10001 weight=5;
         server 47.103.5.190:10001 weight=2;
    }

    upstream subweb  {
         server 111.231.111.150:10002 weight=5;
         server 47.103.5.190:10002 weight=2;
    }

    server {
        listen        80;
        server_name   111.231.111.150;

        access_log   /var/log/nginx/access.log  main;

        if ($request_method = 'OPTIONS') {
                return 204;
        }

        location / {
            proxy_pass         http://cloud_plus;
            proxy_redirect     default;

            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            #proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;

            client_max_body_size       10m;
            client_body_buffer_size    128k;

            client_body_temp_path      client_body_temp;

            proxy_connect_timeout      70;
            proxy_send_timeout         90;
            proxy_read_timeout         90;

            proxy_buffer_size          4k;
            proxy_buffers              4 32k;
            proxy_busy_buffers_size    64k;
            proxy_temp_file_write_size 64k;

            proxy_temp_path            proxy_temp;

            charset  utf8;
        }

        error_page   500 502 503 504 404  /50x.html;

        location = /404.html {
            root  /spool/www;
        }

        location /old_stuff/ {
            rewrite   ^/old_stuff/(.*)$  /new_stuff/$1  permanent;
        }

        location /download/ {

            valid_referers  none  blocked  server_names  *.example.com;

            if ($invalid_referer) {
                #rewrite   ^/   http://www.example.com/;
                return   403;
            }

            #rewrite_log  on;

            # rewrite /download/*/mp3/*.any_ext to /download/*/mp3/*.mp3
            rewrite ^/(download/.*)/mp3/(.*)\..*$
                    /$1/mp3/$2.mp3                   break;

            root         /spool/www;
            #autoindex    on;
            access_log   /var/log/nginx/download.log  download;
        }

        location ~* \.(jpg|jpeg|gif)$ {
            root         /spool/www;
            access_log   off;
            expires      30d;
        }
    }

    server {
        listen        10002;
        server_name   111.231.111.150;

        access_log   /var/log/nginx/access.log  main;

        location / {
            proxy_pass         http://cloud_plus;
            proxy_redirect     default;

            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            #proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
         }

         location ~* \.(ico|jpe?g|gif|png|bmp|swf|flv)$ {
                   expires 30d;
                   #log_not_found off;
                   access_log off;
                   # 防盗链
                   valid_referers none blocked *.benet.com benet.com;
                   if ( $invalid_referer ) {
                      rewrite ^/ http://www.benet.com/error.png;
                   }
               }

               location ~* \.(js|css)$ {
                   expires 7d;
                   log_not_found off;
                   access_log off;
               }
    }
}